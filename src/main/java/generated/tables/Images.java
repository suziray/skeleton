/**
 * This class is generated by jOOQ
 */
package generated.tables;


import generated.Keys;
import generated.Public;
import generated.tables.records.ImagesRecord;

import java.sql.Time;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.4"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Images extends TableImpl<ImagesRecord> {

	private static final long serialVersionUID = 1473007334;

	/**
	 * The reference instance of <code>public.images</code>
	 */
	public static final Images IMAGES = new Images();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<ImagesRecord> getRecordType() {
		return ImagesRecord.class;
	}

	/**
	 * The column <code>public.images.id</code>.
	 */
	public final TableField<ImagesRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>public.images.uploaded</code>.
	 */
	public final TableField<ImagesRecord, Time> UPLOADED = createField("uploaded", org.jooq.impl.SQLDataType.TIME.defaulted(true), this, "");

	/**
	 * The column <code>public.images.rid</code>.
	 */
	public final TableField<ImagesRecord, Integer> RID = createField("rid", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>public.images.imagestring</code>.
	 */
	public final TableField<ImagesRecord, String> IMAGESTRING = createField("imagestring", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647), this, "");

	/**
	 * Create a <code>public.images</code> table reference
	 */
	public Images() {
		this("images", null);
	}

	/**
	 * Create an aliased <code>public.images</code> table reference
	 */
	public Images(String alias) {
		this(alias, IMAGES);
	}

	private Images(String alias, Table<ImagesRecord> aliased) {
		this(alias, aliased, null);
	}

	private Images(String alias, Table<ImagesRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<ImagesRecord, Integer> getIdentity() {
		return Keys.IDENTITY_IMAGES;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<ImagesRecord> getPrimaryKey() {
		return Keys.CONSTRAINT_8;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<ImagesRecord>> getKeys() {
		return Arrays.<UniqueKey<ImagesRecord>>asList(Keys.CONSTRAINT_8);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Images as(String alias) {
		return new Images(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Images rename(String name) {
		return new Images(name, null);
	}
}
